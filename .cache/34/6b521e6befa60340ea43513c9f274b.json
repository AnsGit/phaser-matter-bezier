{"id":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Internally used method to keep track of the tile indexes that collide within a layer. This\n * updates LayerData.collideIndexes to either contain or not contain the given `tileIndex`.\n *\n * @function Phaser.Tilemaps.Components.SetLayerCollisionIndex\n * @since 3.0.0\n *\n * @param {number} tileIndex - The tile index to set the collision boolean for.\n * @param {boolean} collides - Should the tile index collide or not?\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar SetLayerCollisionIndex = function (tileIndex, collides, layer)\n{\n    var loc = layer.collideIndexes.indexOf(tileIndex);\n\n    if (collides && loc === -1)\n    {\n        layer.collideIndexes.push(tileIndex);\n    }\n    else if (!collides && loc !== -1)\n    {\n        layer.collideIndexes.splice(loc, 1);\n    }\n};\n\nmodule.exports = SetLayerCollisionIndex;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Internally used method to keep track of the tile indexes that collide within a layer. This\n * updates LayerData.collideIndexes to either contain or not contain the given `tileIndex`.\n *\n * @function Phaser.Tilemaps.Components.SetLayerCollisionIndex\n * @since 3.0.0\n *\n * @param {number} tileIndex - The tile index to set the collision boolean for.\n * @param {boolean} collides - Should the tile index collide or not?\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar SetLayerCollisionIndex = function (tileIndex, collides, layer)\n{\n    var loc = layer.collideIndexes.indexOf(tileIndex);\n\n    if (collides && loc === -1)\n    {\n        layer.collideIndexes.push(tileIndex);\n    }\n    else if (!collides && loc !== -1)\n    {\n        layer.collideIndexes.splice(loc, 1);\n    }\n};\n\nmodule.exports = SetLayerCollisionIndex;\n"},"lineCount":33}},"error":null,"hash":"30d710b2dcf373a5938e45965f9d79bc","cacheData":{"env":{}}}