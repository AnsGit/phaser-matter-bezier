{"id":"node_modules/phaser/src/tilemaps/components/Fill.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315},{"name":"./GetTilesWithin","loc":{"line":7,"column":29,"index":210},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/Fill.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/GetTilesWithin.js"},{"name":"./CalculateFacesWithin","loc":{"line":8,"column":35,"index":266},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/Fill.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/CalculateFacesWithin.js"},{"name":"./SetTileCollision","loc":{"line":9,"column":31,"index":324},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/Fill.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/SetTileCollision.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetTilesWithin = require('./GetTilesWithin');\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\nvar SetTileCollision = require('./SetTileCollision');\n\n/**\n * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\n * specified index. Tiles will be set to collide if the given index is a colliding index.\n * Collision information in the region will be recalculated.\n *\n * @function Phaser.Tilemaps.Components.Fill\n * @since 3.0.0\n *\n * @param {number} index - The tile index to fill the area with.\n * @param {number} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} width - How many tiles wide from the `tileX` index the area will be.\n * @param {number} height - How many tiles tall from the `tileY` index the area will be.\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\n * @param {Phaser.Tilemaps.LayerData} layer - The tile layer to use. If not given the current layer is used.\n */\nvar Fill = function (index, tileX, tileY, width, height, recalculateFaces, layer)\n{\n    var doesIndexCollide = (layer.collideIndexes.indexOf(index) !== -1);\n\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n    for (var i = 0; i < tiles.length; i++)\n    {\n        tiles[i].index = index;\n\n        SetTileCollision(tiles[i], doesIndexCollide);\n    }\n\n    if (recalculateFaces)\n    {\n        // Recalculate the faces within the area and neighboring tiles\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n    }\n};\n\nmodule.exports = Fill;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/Fill.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/components/Fill.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetTilesWithin = require('./GetTilesWithin');\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\nvar SetTileCollision = require('./SetTileCollision');\n\n/**\n * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\n * specified index. Tiles will be set to collide if the given index is a colliding index.\n * Collision information in the region will be recalculated.\n *\n * @function Phaser.Tilemaps.Components.Fill\n * @since 3.0.0\n *\n * @param {number} index - The tile index to fill the area with.\n * @param {number} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} width - How many tiles wide from the `tileX` index the area will be.\n * @param {number} height - How many tiles tall from the `tileY` index the area will be.\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\n * @param {Phaser.Tilemaps.LayerData} layer - The tile layer to use. If not given the current layer is used.\n */\nvar Fill = function (index, tileX, tileY, width, height, recalculateFaces, layer)\n{\n    var doesIndexCollide = (layer.collideIndexes.indexOf(index) !== -1);\n\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n    for (var i = 0; i < tiles.length; i++)\n    {\n        tiles[i].index = index;\n\n        SetTileCollision(tiles[i], doesIndexCollide);\n    }\n\n    if (recalculateFaces)\n    {\n        // Recalculate the faces within the area and neighboring tiles\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n    }\n};\n\nmodule.exports = Fill;\n"},"lineCount":48}},"error":null,"hash":"34645a6318302a9fbe3ae3dd922b46ab","cacheData":{"env":{}}}