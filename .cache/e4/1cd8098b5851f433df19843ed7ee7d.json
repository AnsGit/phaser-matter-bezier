{"id":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315},{"name":"./GetTilesWithin","loc":{"line":7,"column":29,"index":210},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/GetTilesWithin.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetTilesWithin = require('./GetTilesWithin');\n\n/**\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\n * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\n * not change collision information.\n *\n * @function Phaser.Tilemaps.Components.ReplaceByIndex\n * @since 3.0.0\n *\n * @param {number} findIndex - The index of the tile to search for.\n * @param {number} newIndex - The index of the tile to replace it with.\n * @param {number} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} width - How many tiles wide from the `tileX` index the area will be.\n * @param {number} height - How many tiles tall from the `tileY` index the area will be.\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar ReplaceByIndex = function (findIndex, newIndex, tileX, tileY, width, height, layer)\n{\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n    for (var i = 0; i < tiles.length; i++)\n    {\n        if (tiles[i] && tiles[i].index === findIndex)\n        {\n            tiles[i].index = newIndex;\n        }\n    }\n};\n\nmodule.exports = ReplaceByIndex;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar GetTilesWithin = require('./GetTilesWithin');\n\n/**\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\n * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\n * not change collision information.\n *\n * @function Phaser.Tilemaps.Components.ReplaceByIndex\n * @since 3.0.0\n *\n * @param {number} findIndex - The index of the tile to search for.\n * @param {number} newIndex - The index of the tile to replace it with.\n * @param {number} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\n * @param {number} width - How many tiles wide from the `tileX` index the area will be.\n * @param {number} height - How many tiles tall from the `tileY` index the area will be.\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar ReplaceByIndex = function (findIndex, newIndex, tileX, tileY, width, height, layer)\n{\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n    for (var i = 0; i < tiles.length; i++)\n    {\n        if (tiles[i] && tiles[i].index === findIndex)\n        {\n            tiles[i].index = newIndex;\n        }\n    }\n};\n\nmodule.exports = ReplaceByIndex;\n"},"lineCount":39}},"error":null,"hash":"44973f19914e0b98d7902dfea988e3a9","cacheData":{"env":{}}}