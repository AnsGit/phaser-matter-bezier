{"id":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315},{"name":"./CalculateFacesWithin","loc":{"line":7,"column":35,"index":216},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/PutTilesAt.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/CalculateFacesWithin.js"},{"name":"./PutTileAt","loc":{"line":8,"column":24,"index":267},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/PutTilesAt.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/PutTileAt.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\nvar PutTileAt = require('./PutTileAt');\n\n/**\n * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\n * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\n * all attributes will be copied over to the specified location. If you pass in an index, only the\n * index at the specified location will be changed. Collision information will be recalculated\n * within the region tiles were changed.\n *\n * @function Phaser.Tilemaps.Components.PutTilesAt\n * @since 3.0.0\n *\n * @param {(number[]|number[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\n * @param {number} tileX - The x coordinate, in tiles, not pixels.\n * @param {number} tileY - The y coordinate, in tiles, not pixels.\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar PutTilesAt = function (tilesArray, tileX, tileY, recalculateFaces, layer)\n{\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\n\n    if (!Array.isArray(tilesArray))\n    {\n        return null;\n    }\n\n    // Force the input array to be a 2D array\n    if (!Array.isArray(tilesArray[0]))\n    {\n        tilesArray = [ tilesArray ];\n    }\n\n    var height = tilesArray.length;\n    var width = tilesArray[0].length;\n\n    for (var ty = 0; ty < height; ty++)\n    {\n        for (var tx = 0; tx < width; tx++)\n        {\n            var tile = tilesArray[ty][tx];\n\n            PutTileAt(tile, tileX + tx, tileY + ty, false, layer);\n        }\n    }\n\n    if (recalculateFaces)\n    {\n        // Recalculate the faces within the destination area and neighboring tiles\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n    }\n};\n\nmodule.exports = PutTilesAt;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/PutTilesAt.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/components/PutTilesAt.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\nvar PutTileAt = require('./PutTileAt');\n\n/**\n * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\n * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\n * all attributes will be copied over to the specified location. If you pass in an index, only the\n * index at the specified location will be changed. Collision information will be recalculated\n * within the region tiles were changed.\n *\n * @function Phaser.Tilemaps.Components.PutTilesAt\n * @since 3.0.0\n *\n * @param {(number[]|number[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\n * @param {number} tileX - The x coordinate, in tiles, not pixels.\n * @param {number} tileY - The y coordinate, in tiles, not pixels.\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar PutTilesAt = function (tilesArray, tileX, tileY, recalculateFaces, layer)\n{\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\n\n    if (!Array.isArray(tilesArray))\n    {\n        return null;\n    }\n\n    // Force the input array to be a 2D array\n    if (!Array.isArray(tilesArray[0]))\n    {\n        tilesArray = [ tilesArray ];\n    }\n\n    var height = tilesArray.length;\n    var width = tilesArray[0].length;\n\n    for (var ty = 0; ty < height; ty++)\n    {\n        for (var tx = 0; tx < width; tx++)\n        {\n            var tile = tilesArray[ty][tx];\n\n            PutTileAt(tile, tileX + tx, tileY + ty, false, layer);\n        }\n    }\n\n    if (recalculateFaces)\n    {\n        // Recalculate the faces within the destination area and neighboring tiles\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n    }\n};\n\nmodule.exports = PutTilesAt;\n"},"lineCount":62}},"error":null,"hash":"cefbd79f554a5e2d8c31622e32a53689","cacheData":{"env":{}}}