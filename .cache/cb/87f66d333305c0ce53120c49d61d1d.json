{"id":"node_modules/phaser/src/display/color/ValueToColor.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315},{"name":"./HexStringToColor","loc":{"line":7,"column":31,"index":212},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/ValueToColor.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/HexStringToColor.js"},{"name":"./IntegerToColor","loc":{"line":8,"column":29,"index":264},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/ValueToColor.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/IntegerToColor.js"},{"name":"./ObjectToColor","loc":{"line":9,"column":28,"index":313},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/ValueToColor.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/ObjectToColor.js"},{"name":"./RGBStringToColor","loc":{"line":10,"column":31,"index":364},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/ValueToColor.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/RGBStringToColor.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar HexStringToColor = require('./HexStringToColor');\nvar IntegerToColor = require('./IntegerToColor');\nvar ObjectToColor = require('./ObjectToColor');\nvar RGBStringToColor = require('./RGBStringToColor');\n\n/**\n * Converts the given source color value into an instance of a Color class.\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\n *\n * @function Phaser.Display.Color.ValueToColor\n * @since 3.0.0\n *\n * @param {(string|number|Phaser.Types.Display.InputColorObject)} input - The source color value to convert.\n *\n * @return {Phaser.Display.Color} A Color object.\n */\nvar ValueToColor = function (input)\n{\n    var t = typeof input;\n\n    switch (t)\n    {\n        case 'string':\n\n            if (input.substr(0, 3).toLowerCase() === 'rgb')\n            {\n                return RGBStringToColor(input);\n            }\n            else\n            {\n                return HexStringToColor(input);\n            }\n\n        case 'number':\n\n            return IntegerToColor(input);\n\n        case 'object':\n\n            return ObjectToColor(input);\n    }\n};\n\nmodule.exports = ValueToColor;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/display/color/ValueToColor.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"node_modules/phaser/src/display/color/ValueToColor.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar HexStringToColor = require('./HexStringToColor');\nvar IntegerToColor = require('./IntegerToColor');\nvar ObjectToColor = require('./ObjectToColor');\nvar RGBStringToColor = require('./RGBStringToColor');\n\n/**\n * Converts the given source color value into an instance of a Color class.\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\n *\n * @function Phaser.Display.Color.ValueToColor\n * @since 3.0.0\n *\n * @param {(string|number|Phaser.Types.Display.InputColorObject)} input - The source color value to convert.\n *\n * @return {Phaser.Display.Color} A Color object.\n */\nvar ValueToColor = function (input)\n{\n    var t = typeof input;\n\n    switch (t)\n    {\n        case 'string':\n\n            if (input.substr(0, 3).toLowerCase() === 'rgb')\n            {\n                return RGBStringToColor(input);\n            }\n            else\n            {\n                return HexStringToColor(input);\n            }\n\n        case 'number':\n\n            return IntegerToColor(input);\n\n        case 'object':\n\n            return ObjectToColor(input);\n    }\n};\n\nmodule.exports = ValueToColor;\n"},"lineCount":51}},"error":null,"hash":"3d50a265b3c5e661ffab2eed0b415f25","cacheData":{"env":{}}}