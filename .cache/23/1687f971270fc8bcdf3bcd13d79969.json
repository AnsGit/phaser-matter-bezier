{"id":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315},{"name":"./SetTileCollision","loc":{"line":7,"column":31,"index":212},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/SetTileCollision.js"},{"name":"./CalculateFacesWithin","loc":{"line":8,"column":35,"index":270},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/CalculateFacesWithin.js"},{"name":"./SetLayerCollisionIndex","loc":{"line":9,"column":37,"index":334},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar SetTileCollision = require('./SetTileCollision');\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\n\n/**\n * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\n * the given array. The `collides` parameter controls if collision will be enabled (true) or\n * disabled (false). Tile indexes not currently in the layer are not affected.\n *\n * @function Phaser.Tilemaps.Components.SetCollisionByExclusion\n * @since 3.0.0\n *\n * @param {number[]} indexes - An array of the tile indexes to not be counted for collision.\n * @param {boolean} collides - If true it will enable collision. If false it will clear collision.\n * @param {boolean} recalculateFaces - Whether or not to recalculate the tile faces after the update.\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar SetCollisionByExclusion = function (indexes, collides, recalculateFaces, layer)\n{\n    if (collides === undefined) { collides = true; }\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\n\n    if (!Array.isArray(indexes))\n    {\n        indexes = [ indexes ];\n    }\n\n    // Note: this only updates layer.collideIndexes for tile indexes found currently in the layer\n    for (var ty = 0; ty < layer.height; ty++)\n    {\n        for (var tx = 0; tx < layer.width; tx++)\n        {\n            var tile = layer.data[ty][tx];\n\n            if (tile && indexes.indexOf(tile.index) === -1)\n            {\n                SetTileCollision(tile, collides);\n                SetLayerCollisionIndex(tile.index, collides, layer);\n            }\n        }\n    }\n\n    if (recalculateFaces)\n    {\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n    }\n};\n\nmodule.exports = SetCollisionByExclusion;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}}],"sources":{"node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar SetTileCollision = require('./SetTileCollision');\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\n\n/**\n * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\n * the given array. The `collides` parameter controls if collision will be enabled (true) or\n * disabled (false). Tile indexes not currently in the layer are not affected.\n *\n * @function Phaser.Tilemaps.Components.SetCollisionByExclusion\n * @since 3.0.0\n *\n * @param {number[]} indexes - An array of the tile indexes to not be counted for collision.\n * @param {boolean} collides - If true it will enable collision. If false it will clear collision.\n * @param {boolean} recalculateFaces - Whether or not to recalculate the tile faces after the update.\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\n */\nvar SetCollisionByExclusion = function (indexes, collides, recalculateFaces, layer)\n{\n    if (collides === undefined) { collides = true; }\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\n\n    if (!Array.isArray(indexes))\n    {\n        indexes = [ indexes ];\n    }\n\n    // Note: this only updates layer.collideIndexes for tile indexes found currently in the layer\n    for (var ty = 0; ty < layer.height; ty++)\n    {\n        for (var tx = 0; tx < layer.width; tx++)\n        {\n            var tile = layer.data[ty][tx];\n\n            if (tile && indexes.indexOf(tile.index) === -1)\n            {\n                SetTileCollision(tile, collides);\n                SetLayerCollisionIndex(tile.index, collides, layer);\n            }\n        }\n    }\n\n    if (recalculateFaces)\n    {\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n    }\n};\n\nmodule.exports = SetCollisionByExclusion;\n"},"lineCount":56}},"error":null,"hash":"7f7e36f92299a86446bd01717aaebd66","cacheData":{"env":{}}}