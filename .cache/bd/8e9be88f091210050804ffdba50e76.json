{"id":"node_modules/phaser/src/display/color/RGBToString.js","dependencies":[{"name":"/home/ansi/work/my/phaser-matter-bezier/package.json","includedInParent":true,"mtime":1683185740025},{"name":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/package.json","includedInParent":true,"mtime":1683181678315},{"name":"./ComponentToHex","loc":{"line":7,"column":29,"index":210},"parent":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/RGBToString.js","resolved":"/home/ansi/work/my/phaser-matter-bezier/node_modules/phaser/src/display/color/ComponentToHex.js"}],"generated":{"js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar ComponentToHex = require('./ComponentToHex');\n\n/**\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\n *\n * @function Phaser.Display.Color.RGBToString\n * @since 3.0.0\n *\n * @param {number} r - The red color value. A number between 0 and 255.\n * @param {number} g - The green color value. A number between 0 and 255.\n * @param {number} b - The blue color value. A number between 0 and 255.\n * @param {number} [a=255] - The alpha value. A number between 0 and 255.\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\n *\n * @return {string} A string-based representation of the color values.\n */\nvar RGBToString = function (r, g, b, a, prefix)\n{\n    if (a === undefined) { a = 255; }\n    if (prefix === undefined) { prefix = '#'; }\n\n    if (prefix === '#')\n    {\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1, 7);\n    }\n    else\n    {\n        return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\n    }\n};\n\nmodule.exports = RGBToString;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/phaser/src/display/color/RGBToString.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"node_modules/phaser/src/display/color/RGBToString.js":"/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2013-2023 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nvar ComponentToHex = require('./ComponentToHex');\n\n/**\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\n *\n * @function Phaser.Display.Color.RGBToString\n * @since 3.0.0\n *\n * @param {number} r - The red color value. A number between 0 and 255.\n * @param {number} g - The green color value. A number between 0 and 255.\n * @param {number} b - The blue color value. A number between 0 and 255.\n * @param {number} [a=255] - The alpha value. A number between 0 and 255.\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\n *\n * @return {string} A string-based representation of the color values.\n */\nvar RGBToString = function (r, g, b, a, prefix)\n{\n    if (a === undefined) { a = 255; }\n    if (prefix === undefined) { prefix = '#'; }\n\n    if (prefix === '#')\n    {\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1, 7);\n    }\n    else\n    {\n        return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\n    }\n};\n\nmodule.exports = RGBToString;\n"},"lineCount":39}},"error":null,"hash":"48b05ad4d9ac026dd21d536aedd8f0e6","cacheData":{"env":{}}}